generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model SlackAppInstallation {
    @@map("slack_app_installation")

    id                              Int       @id @default(autoincrement())
    clientId                        String?   @map("client_id")
    appId                           String?   @map("app_id") 
    enterpriseId                    String?   @map("enterprise_id")
    enterpriseName                  String?   @map("enterprise_name")
    enterpriseUrl                   String?   @map("enterprise_url")
    teamId                          String?   @map("team_id")
    teamName                        String?   @map("team_name")
    botToken                        String?   @map("bot_token")
    botId                           String?   @map("bot_id")
    botUserId                       String?   @map("bot_user_id")
    botScopes                       String?   @map("bot_scopes")
    botRefreshToken                 String?   @map("bot_refresh_token")
    botTokenExpiresAt               DateTime? @map("bot_token_expires_at")
    userId                          String?   @map("user_id")
    userToken                       String?   @map("user_token")
    userScopes                      String?   @map("user_scopes")
    userRefreshToken                String?   @map("user_refresh_token")
    userTokenExpiresAt              DateTime? @map("user_token_expires_at")
    incomingWebhookUrl              String?   @map("incoming_webhook_url")
    incomingWebhookChannel          String?   @map("incoming_webhook_channel")
    incomingWebhookChannelId        String?   @map("incoming_webhook_channel_id")
    incomingWebhookConfigurationUrl String?   @map("incoming_webhook_configuration_url")
    isEnterpriseInstall             Boolean   @default(false) @map("is_enterprise_install")
    tokenType                       String    @default("bot") @map("token_type")
    installedAt                     DateTime  @default(now()) @map("installed_at")
    // Following are custom columns for our use case
    installationStatus              String    @default("INACTIVE") @map("installationStatus")
    merchantId                      Int?      @map("merchantId")
}

model SlackEventSubscription {
    @@map("slack_event_subscription")

    id                              Int       @id @default(autoincrement())
    api_app_id                      String?   @map("api_app_id") 
    enterpriseId                    String?   @map("enterprise_id")
    enterpriseName                  String?   @map("enterprise_name")
    enterpriseUrl                   String?   @map("enterprise_url")
    teamId                          String?   @map("team_id")
    teamName                        String?   @map("team_name")
    teamDomain                     String?   @map("team_domain")
    channelId                      String?   @map("channel_id")
    channelName                    String?   @map("channel_name")
    userId                          String?   @map("user_id")
    userName                       String?   @map("user_name")
    command                         String?   @map("command")
    text                            String?   @map("text")
    triggerId                      String?   @map("trigger_id")
    
    addedOn                     DateTime  @default(now()) @map("added_on")
    updatedOn                   DateTime  @default(now()) @map("updated_on")
    eventStatus                 String    @default("INACTIVE") @map("eventStatus")
    ownerApproval               String?    @map("merchantId")            
    merchantId                      Int?      @map("merchantId")
}